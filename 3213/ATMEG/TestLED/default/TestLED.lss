
TestLED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000094  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000025  00000000  00000000  00000108  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000f3  00000000  00000000  0000012d  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000a5  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000a3  00000000  00000000  000002c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  00000368  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000008d  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e4 e9       	ldi	r30, 0x94	; 148
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 36       	cpi	r26, 0x60	; 96
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	09 d0       	rcall	.+18     	; 0x6c <main>
  5a:	1a c0       	rjmp	.+52     	; 0x90 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <waitd>:

#include <avr/io.h>
#include <compat/ina90.h>    // needed for  _NOP()

void waitd()
{
  5e:	80 e0       	ldi	r24, 0x00	; 0
  60:	90 e0       	ldi	r25, 0x00	; 0
  62:	01 c0       	rjmp	.+2      	; 0x66 <waitd+0x8>
    register unsigned short int t = 0;
    while(++t) _NOP();
  64:	00 00       	nop
  66:	01 97       	sbiw	r24, 0x01	; 1
  68:	e9 f7       	brne	.-6      	; 0x64 <waitd+0x6>
}
  6a:	08 95       	ret

0000006c <main>:


int main()
{
	DDRC |= 0x20;
  6c:	a5 9a       	sbi	0x14, 5	; 20

	while(1)
	{
		PORTC |= 0x20;  //set 1 on first position, or simpler: PORTC = 0x20;
  6e:	ad 9a       	sbi	0x15, 5	; 21
  70:	80 e0       	ldi	r24, 0x00	; 0
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	01 c0       	rjmp	.+2      	; 0x78 <main+0xc>
#include <compat/ina90.h>    // needed for  _NOP()

void waitd()
{
    register unsigned short int t = 0;
    while(++t) _NOP();
  76:	00 00       	nop
  78:	01 97       	sbiw	r24, 0x01	; 1
  7a:	e9 f7       	brne	.-6      	; 0x76 <main+0xa>

	while(1)
	{
		PORTC |= 0x20;  //set 1 on first position, or simpler: PORTC = 0x20;
		waitd();
		PORTC &= 0x5F; //remove position 5 value, or simpler: PORTC = 0;
  7c:	85 b3       	in	r24, 0x15	; 21
  7e:	8f 75       	andi	r24, 0x5F	; 95
  80:	85 bb       	out	0x15, r24	; 21
  82:	80 e0       	ldi	r24, 0x00	; 0
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	01 c0       	rjmp	.+2      	; 0x8a <main+0x1e>
#include <compat/ina90.h>    // needed for  _NOP()

void waitd()
{
    register unsigned short int t = 0;
    while(++t) _NOP();
  88:	00 00       	nop
  8a:	01 97       	sbiw	r24, 0x01	; 1
  8c:	e9 f7       	brne	.-6      	; 0x88 <main+0x1c>
  8e:	ef cf       	rjmp	.-34     	; 0x6e <main+0x2>

00000090 <_exit>:
  90:	f8 94       	cli

00000092 <__stop_program>:
  92:	ff cf       	rjmp	.-2      	; 0x92 <__stop_program>
